"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.devLogger = devLogger;
const path_1 = __importDefault(require("path"));
const winston_1 = __importDefault(require("winston"));
require("winston-daily-rotate-file");
// 格式化错误信息
const formatError = (error) => {
    if (!error) {
        return 'Unknown Error';
    }
    if (typeof error === 'string') {
        return error;
    }
    return JSON.stringify({
        message: error.message,
        stack: error.stack,
        plugin: error.plugin,
        file: error.id || error.file,
        code: error.code,
        frame: error.frame,
        loc: error.loc,
        name: error.name,
        cause: error.cause,
    }, null, 2);
};
function devLogger(options = {}) {
    const { filename = 'application-%DATE%.log', dirname = path_1.default.join(process.cwd(), 'logs'), datePattern = 'YYYY-MM-DD', maxFiles = '7d', // 保留7天的日志文件
    maxSize = '10m', // 单个日志文件最大10MB
     } = options;
    const transport = new winston_1.default.transports.DailyRotateFile({
        filename,
        dirname,
        datePattern,
        maxFiles,
        maxSize,
    });
    const logger = winston_1.default.createLogger({
        level: 'info',
        format: winston_1.default.format.combine(winston_1.default.format.timestamp({
            format: 'YYYY-MM-DD HH:mm:ss',
        }), winston_1.default.format.printf(info => `[${info.timestamp}] [${info.level.toUpperCase()}] ${info.message}`)),
        transports: [transport],
    });
    return {
        name: 'vite-plugin-dev-logger',
        configureServer(server) {
            // 捕获 logger info 日志
            const originLoggerInfo = server.config.logger.info;
            server.config.logger.info = (msg, options) => {
                logger.info(msg);
                originLoggerInfo(msg, options);
            };
            // 捕获 logger warn 日志
            const originLoggerWarn = server.config.logger.warn;
            server.config.logger.warn = (msg, options) => {
                logger.warn(msg);
                originLoggerWarn(msg, options);
            };
            // 捕获 logger error 日志
            const originLoggerError = server.config.logger.error;
            server.config.logger.error = (msg, options) => {
                logger.error(msg);
                originLoggerError(msg, options);
            };
            // 监听服务器事件
            server.middlewares.use((req, res, next) => {
                logger.info(`${req.method} ${req.url}`);
                next();
            });
            // 监听服务器错误
            server.httpServer?.on('error', error => {
                const errorDetail = formatError(error);
                logger.error('httpServer Error: \n' + errorDetail);
            });
            // 记录服务器启动信息
            logger.info(`DevServer started at ${server.config.server.host || 'localhost'}:${server.config.server.port}`);
        },
    };
}
